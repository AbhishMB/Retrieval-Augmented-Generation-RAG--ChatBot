Retrieval-Augmented Generation (RAG) Chat Application

Overview

This repository contains the implementation of a Retrieval-Augmented Generation (RAG) chatbot capable of delivering accurate and contextually relevant responses. The project leverages Python and LangChain tools, incorporating FAISS and Hugging Face embeddings to create a robust conversational AI system.

Features

Document Loading and Splitting: Efficient handling of large documents using the LangChain library.

Embeddings and Vector Store: Utilizes Hugging Face embeddings with FAISS for vectorized document storage and retrieval.

Retrieval-Augmented Generation Pipeline: Combines retrieved information with generative models for enhanced chatbot responses.

Streamlit Deployment: Optional user-friendly web interface.

Installation and Usage

Prerequisites

Python 3.8 or higher.

Required libraries:

transformers

langchain

faiss-cpu

sentence-transformers

huggingface-hub

pandas

streamlit (optional for deployment)

Steps to Run

Clone the repository

git clone <repository_link>
cd <repository_name>

Install dependencies

pip install -r requirements.txt

Run the chatbot

For basic usage:

python rag_assignment.ipynb

For web deployment with Streamlit:

streamlit run app.py

Interact

Use the terminal or Streamlit interface to ask questions and receive responses.

Code Documentation

Module: rag_chatbot

Dependencies

transformers

langchain

faiss-cpu

sentence-transformers

huggingface-hub

Functions

Hugging Face Login

def login_to_hugging_face(api_token):
    """Logs into the Hugging Face platform using the provided API token."""

Document Loader and Splitter

def load_and_split_documents(file_path, chunk_size=500, chunk_overlap=100):
    """Loads a text file and splits its content into chunks."""

Embedding and Vector Store

def create_vector_store(documents, model_name="sentence-transformers/all-MiniLM-L6-v2"):
    """Creates a FAISS vector store from a list of documents using Hugging Face embeddings."""

Deliverables

Code

File: rag_assignment.ipynb

Includes:

Document Loading

RAG Pipeline Implementation

Hugging Face Authentication

Comprehensive code comments for clarity.

Sample Questions and Responses

File: responses.txt

GitHub Repository

Includes:

Code

responses.txt

README.md (this document)

Optional Deployment

Hosted Streamlit Application (if applicable).

References

LangChain Documentation

FAISS Documentation

Python Documentation

## References
- [LangChain Documentation](https://langchain.com/)
- [FAISS Documentation](https://faiss.io/)
- [Python Documentation](https://docs.python.org/3/)


